{
  "name": "lab",
  "description": "Test utility",
  "version": "3.1.1",
  "author": {
    "name": "Eran Hammer",
    "email": "eran@hueniverse.com",
    "url": "http://hueniverse.com"
  },
  "contributors": [],
  "repository": {
    "type": "git",
    "url": "git://github.com/spumko/lab"
  },
  "main": "index",
  "keywords": [
    "test"
  ],
  "engines": {
    "node": ">=0.10.22"
  },
  "dependencies": {
    "optimist": "0.6.x",
    "esprima": "1.x.x",
    "chai": "1.x.x",
    "handlebars": "1.x.x",
    "async": "0.7.x",
    "diff": "1.x.x"
  },
  "devDependencies": {},
  "bin": {
    "lab": "./bin/lab"
  },
  "scripts": {},
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/spumko/lab/raw/master/LICENSE"
    }
  ],
  "readme": "<a href=\"https://github.com/spumko\"><img src=\"https://raw.github.com/spumko/spumko/master/images/from.png\" align=\"right\" /></a>\n![lab Logo](https://raw.github.com/spumko/lab/master/images/lab.png)\n\nNode test utility\n\n[![Build Status](https://secure.travis-ci.org/spumko/lab.png)](http://travis-ci.org/spumko/lab)\n\n\n## Introduction\n\n**lab** is a simple test utility for node. Unlike other test utilities, lab uses domains instead of uncaught exception and other\nglobal manipulation which created conflicts with some [**spumko**](https://github.com/spumko) modules. Our goal with **lab** is to\nkeep the execution engine as simple as possible, and not try to build an extensible framework.\n\n## Command Line\n\n**lab** supports the following command line options:\n- `-c` - enables code coverage analysis.\n- `-C` - forces color output\n- `-d` - dry run. Skips all tests. Use with `-v` to generate a test catalog. Defaults to `false`.\n- `-e` - value to set the `NODE_ENV` environment variable to, defaults to 'test'.\n- `-G` - export `Lab` as a global. Defaults to disabled. If you enable this, make sure to remove any `require('lab')` lines from your tests.\n- `-i` - only run the test for the given identifier.\n- `-l` - disables global variable leak detection.\n- `-m` - individual tests timeout in milliseconds, defaults to 2 seconds.\n- `-o` - file to write the report to, otherwise sent to stdout.\n- `-p` - sets parallel execution as default test option. Defaults to serial execution.\n- `-r` - the reporter used to generate the test results. Defaults to `console`. Options are:\n    - `console` - text report.\n    - `html` - HTML code coverage report (sets `-c`).\n    - `json` - output results in JSON format.\n    - `tap` - TAP protocol report.\n- `-s` - silence test output, defaults to false.\n- `-t` - minimum code test coverage percentage (sets `-c`), defaults to 100%.\n- `-v` - verbose test output, defaults to false.\n\n## Usage\n\nTo install **lab** globally:\n\n```bash\n$ npm install -g lab\n```\n\nTo use locally:\n```bash\n$ npm install --save-dev lab\n```\n\nThen in further examples you will have to call lab like so:\n``` bash\n$ ./node_modules/.bin/lab\n```\n\n\nTo start:\n```bash\n$ lab\n```\n\nBy default, **lab** loads all the '*.js' files inside the local 'test' directory and executes the tests found. To start **lab** using\ndifferent directories or files, pass those as arguments:\n```bash\n$ lab unit.js\n```\n\nTest files must require the **lab** module, and add tests using the `test()` method:\n```javascript\nvar Lab = require('lab');\n\nLab.test('returns true when 1 + 1 equals 2', function (done) {\n\n    Lab.expect(1+1).to.equal(2);\n    done();\n});\n```\n\nWhen a test is completed, `done(err)` must be called, otherwise the test will time out (2 seconds by default) and will fail.\nThe test passes if `done()` is call once before the timeout, no exception thrown, and no arguments are passed to `done()`.\nIf no callback function is provided, the test is considered a TODO reminder and will be skipped.\n\n**lab** works with any test utility that throws an error when a condition isn't met. It uses the same error interface as\n[mocha](http://visionmedia.github.com/mocha/) and already includes [chai](http://chaijs.com/)'s `expect()` in its exported\ninterface as shown above.\n\nTests can be organized into experiments:\n```javascript\nLab.experiment('math', function () {\n\n    Lab.test('returns true when 1 + 1 equals 2', function (done) {\n\n        Lab.expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\nIf you need to perform some async actions before or after executing the tests inside an experiment, the `before()` and\n`after()` methods can be used. To execute code before or after each test in an experiment, use `beforeEach()` and `afterEach()`.\n\n```javascript\nLab.experiment('math', function () {\n\n    Lab.before(function (done) {\n\n        // Wait 1 second\n        setTimeout(function () { done(); }, 1000);\n    });\n\n    Lab.beforeEach(function (done) {\n\n        // Run before every single test\n        done();\n    });\n\n    Lab.test('returns true when 1 + 1 equals 2', function (done) {\n\n        Lab.expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\nBoth `test()` and `experiment()` accept an optional `options` argument which must be an object with the following optional keys:\n- `timeout` -  set a test or experiment specific timeout in milliseconds. Defaults to the global timeout (`2000`ms or the value of `-m`).\n- `parallel` - sets parallel execution of tests within each experiment level. Defaults to `false` (serial execution).\n- `skip` - skip execution. Cannot be overriden in children once parent is set to skip.\n\n```javascript\nLab.experiment('math', { timeout: 1000 }, function () {\n\n    Lab.test('returns true when 1 + 1 equals 2', { parallel: true }, function (done) {\n\n        Lab.expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\nTo make **lab** look like BDD:\n```javascript\nvar Lab = require('lab');\n\nvar describe = Lab.experiment;\nvar it = Lab.test;\nvar expect = Lab.expect;\nvar before = Lab.before;\nvar after = Lab.after;\n\ndescribe('math', function () {\n\n    it('returns true when 1 + 1 equals 2', function (done) {\n\n        expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\nTo make **lab** look like TDD:\n```javascript\nvar Lab = require('lab');\n\nvar suite = Lab.experiment;\nvar test = Lab.test;\nvar expect = Lab.expect;\nvar before = Lab.before;\nvar after = Lab.after;\n\nsuite('math', function () {\n\n    test('returns true when 1 + 1 equals 2', function (done) {\n\n        expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\n## Acknowledgements\n\n**lab** borrows heavily from [mocha](http://visionmedia.github.com/mocha/), including the actual code used to render the coverage report\ninto HTML. [mocha](http://visionmedia.github.com/mocha/) is a comprehensive test framework created by TJ Holowaychuk. **lab** coverage code\nwas originally adapted from [blanket](https://github.com/alex-seville/blanket) which in turn uses\n[falafel](https://github.com/substack/node-falafel).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/spumko/lab/issues"
  },
  "homepage": "https://github.com/spumko/lab",
  "_id": "lab@3.1.1",
  "_shasum": "cb7620e612b546495eb8d4096463df1d16599393",
  "_from": "lab@",
  "_resolved": "https://registry.npmjs.org/lab/-/lab-3.1.1.tgz"
}
